<!--*
* @description: 电子围栏维护
* @author: wp
* @update: 2018-05-5
-->
<template>
  <aside id="efStyle" class="enclosureDiv comFontSize">
    <div v-if="eftype">
      <h3>电子围栏列表<slot name="iconCha"></slot><i class="add iconfont icon-jiahao" @click="addEnclosure"></i></h3>
      <div class="line" v-for="(temp,index) in arrEnclosure" :key="temp.value">
        <el-checkbox class="ef_checkbox" v-model="temp.checked">{{ temp.name }}</el-checkbox>
        <div style="float: right">
          <i class="option iconfont icon-yduigantanhaoshixin"></i>
          <i class="option iconfont icon-jiahao"></i>
          <i class="option iconfont icon-fenxiang"></i>
          <i class="option iconfont icon-lajitong" @click="delEnclosure(index)"></i>
        </div>
      </div>
    </div>

    <div class="form" v-else>
      <div class="title fs20"><i class="iconfont icon-xiangzuojiantou mr10" @click="addEnclosure"></i>电子围栏绘制</div>
      <div class="name">
        <label class="fs16">名称：</label>
        <input type="text" v-model="formData.name" class="fs16" />
      </div>
      <div class="graphical">
        <p @click="graphicalClick">
          <i class="iconfont icon-zidingyixingzhuang"></i>
          自定义形状
        </p>
        <p @click="graphicalClick">
          <i class="iconfont icon-yuan"></i>
          圆形
        </p>
        <p @click="graphicalClick">
          <i class="iconfont icon-sichuan"></i>
          行政区域
        </p>
      </div>
      <div v-if="typevalue == 'inarea'" class="pdl40">
        <el-select v-model="province" filterable clearable :loading="provinceLoading" value-key="adcode" placeholder="请选择省" @change="provinceChange">
          <el-option
            v-for="item in provinceList"
            :key="item.properties.name"
            :label="item.properties.name"
            :value="item.properties">
          </el-option>
        </el-select>
        <el-select v-model="city" value-key="adcode" filterable clearable placeholder="请选择市/区" @change="cityChange">
          <el-option
            v-for="item in cityList"
            :key="item.properties.name"
            :label="item.properties.name"
            :value="item.properties">
          </el-option>
        </el-select>
        <el-select v-model="area" filterable clearable value-key="adcode" placeholder="请选择区/县" @change="areaChange">
          <el-option
            v-for="item in areaList"
            :key="item.properties.name"
            :label="item.properties.name"
            :value="item.properties">
          </el-option>
        </el-select>
      </div>
      <div class="rule">
        <label class="fs16">规则：</label>
        <el-checkbox-group
          v-model="formData.rule"
          @change="ruleChange"
          class="ruleCgro">
          <el-checkbox v-for="rule in ruleList" :key="rule.name" :label="rule.name">{{ rule.name }}</el-checkbox>
        </el-checkbox-group>
      </div>
      <div class="addvhe fs16">
        <label>车辆：</label>
        <span>
            <i class="iconfont icon-tianjia mr5"></i>添加车辆
          </span>
      </div>
      <div class="remark mt15">
        <label class="fs16">备注：</label>
        <textarea></textarea>
      </div>
    </div>
  </aside>
</template>

<script>
  export default {
    name: "Efence",
    props:['ElectronicProp'],
    data() {
      return {
        formData:{
          name:'',
          rule:['入']
        },

        /* 地区切换 start*/
        provinceLoading:false,
        province:null,
        area:null,
        city:null,
        provinceList:[],
        areaList:[],
        cityList:[],
        /* 地区切换 end*/

        eftype:true,           //是否显示电子围栏列表

        currentAreaNode:null,  //当前聚焦的区域
        districtExplorer:null,
        District:null,
        DistrictPolygons:null,

        typevalue:'polygon',
        ruleList:[{id:1,name:'入'},{id:2,name:'出'},{id:3,name:'出入'}],
        arrEnclosure: this.ElectronicProp
      }
    },
    methods: {
      //清空行政区域选择列表
      clearAreaSelect(){
        this.cityList = [];
        this.city = null;
        this.areaList = [];
        this.area = null;
        this.province = null;
        this.provinceList = [];
      },
      //省市切换
      provinceChange(v){
        this.districtExplorer.clearFeaturePolygons();
        this.cityList = [];
        this.city = null;
        this.areaList = [];
        this.area = null;
        if(!v) return;
        this.switch2AreaNode(v.adcode);
      },
      //城市切换
      cityChange(v){
        this.districtExplorer.clearFeaturePolygons();
        this.areaList = [];
        this.area = null;
        if(!v){
          this.switch2AreaNode(this.province.adcode);
          return;
        };
        if(v.level == "district"){
          this.localToArea(v.name);
        }else{
          this.switch2AreaNode(v.adcode);
        }
      },
      //区域切换
      areaChange(v){
        this.districtExplorer.clearFeaturePolygons();
        if(!v){
          if(this.city.level == "district"){
            this.localToArea(this.city.name);
          }else{
            this.switch2AreaNode(this.city.adcode);
          }
          return;
        };
        this.localToArea(v.name);
      },
      //切换电子围栏图形
      graphicalClick(e){
        let index = 1;
        if($(e.target).is('p')){
          $(e.target).addClass('cur').siblings().removeClass('cur');
          index = $(e.target).index()+1;
        }else{
          $(e.target).parent('p').addClass('cur').siblings().removeClass('cur');
          index = $(e.target).parent('p').index()+1;
        }
        this.clearAreaSelect();
        if(index == 1) this.typevalue = "polygon";
        if(index == 2) this.typevalue = "circle";
        if(index == 3) {
          this.typevalue = "inarea";
          this.initDistrictExplorer();
          return;
        };
        this.electronicFence(this.typevalue);
      },
      //根据行政区域绘画地图样式
      localToArea(cityName){
        var that = this;
        //加载行政区划插件
        AMap.service('AMap.DistrictSearch', function () {
          var opts = {
            subdistrict: 1,   //返回下一级行政区
            extensions: 'all',  //返回行政区边界坐标组等具体信息
            showbiz: false
          };
          //实例化DistrictSearch
          if (that.District == null) {
            that.District = new AMap.DistrictSearch(opts);
          }
          //行政区查询
          that.District.search(cityName, function (status, result) {
            if (status == "complete") {
              if (!result.districtList[0].boundaries) return;
              var polygon = new AMap.Polygon({
                map: that.$map,
                strokeWeight: 1,
                path: result.districtList[0].boundaries,
                fillOpacity: 0.7,
                fillColor: '#067816',
                strokeColor: '#CC66CC'
              });
              that.DistrictPolygons = polygon;
              polygon.setMap(that.$map);
              that.$map.setBounds(that.DistrictPolygons.getBounds());
            }
            else {
              this.$message({
                message: '未获取到该城市的空间区域信息！',
                type: 'error'
              });
            }
          });
        });
      },
      //切换区域
      switch2AreaNode(adcode, callback) {
        var _this = this;
        this.districtExplorer.loadAreaNode(adcode, function(error, areaNode) {
          if (error) {
            if (callback) {
              callback(error);
            }
            console.error(error);
            return;
          }
          var props = areaNode.getProps(),
            subFeatures = areaNode.getSubFeatures();
          if(props.level == 'country' && _this.provinceList.length == 0) {
            _this.provinceList = subFeatures;
          }
          if(props.level == 'province') {
            _this.cityList = subFeatures;
          }
          if(props.level == 'city') {
            _this.areaList = subFeatures;
          }
          _this.renderAreaPolygons(areaNode);
          if (callback) {
            callback(null, areaNode);
          }
        });
      },
      //绘制某个区域的边界
      renderAreaPolygons(areaNode) {
        var districtExplorer = this.districtExplorer,
          colors = [
            "#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00",
            "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707",
            "#651067", "#329262", "#5574a6", "#3b3eac"
          ];
        //更新地图视野
        this.$map.setBounds(areaNode.getBounds(), null, null, true);
        //绘制子区域
        districtExplorer.renderSubFeatures(areaNode, function(feature, i) {
          var fillColor = colors[i % colors.length];
          var strokeColor = colors[colors.length - 1 - i % colors.length];
          if(areaNode.adcode != 100000){
            fillColor = '#067816';
            strokeColor = '#CC66CC';
          }
          return {
            cursor: 'default',
            bubble: true,
            strokeColor: strokeColor, //线颜色
            strokeOpacity: 1, //线透明度
            strokeWeight: 1, //线宽
            fillColor: fillColor, //填充色
            fillOpacity: 0.35, //填充透明度
          };
        });
        //绘制父区域
        districtExplorer.renderParentFeature(areaNode, {
          cursor: 'default',
          bubble: true,
          strokeColor: '#067816', //线颜色
          strokeOpacity: 1, //线透明度
          strokeWeight: 1, //线宽
          fillColor: null, //填充色
          fillOpacity: 0.35, //填充透明度
        });

      },
      //切换区域后刷新显示内容
      refreshAreaNode(areaNode) {
        this.renderAreaPolygons(areaNode);
      },
      //加载行政区实例
      initDistrictExplorer() {
        var _this = this;
        _this.provinceLoading = true;
        if(!_this.districtExplorer) {
          AMapUI.loadUI(['geo/DistrictExplorer'], function(DistrictExplorer) {
            //创建一个实例
            var districtExplorer = _this.districtExplorer = new DistrictExplorer({
              map: _this.$map
            });
            //初始化全国电子围栏信息
            _this.switch2AreaNode(100000,function(){
              _this.provinceLoading = false;
            });
          });
        }else{
          //初始化全国电子围栏信息
          _this.switch2AreaNode(100000,function(){
            _this.provinceLoading = false;
          });
        }
      },
      //初始化电子围栏绘制
      electronicFence(typeValue) {
        this.$map.setDefaultCursor("crosshair");
        if(this.districtExplorer) this.districtExplorer.clearFeaturePolygons();
        //类型判断
        if (this.MousetoolElectronicFence == null) {
          var that = this;
          this.$map.plugin(["AMap.MouseTool"], function () {
            that.MousetoolElectronicFence = new AMap.MouseTool(that.$map);
            switch (typeValue) {
              case "polygon": that.MousetoolElectronicFence.polygon(); break;
              case "circle": that.MousetoolElectronicFence.circle(); break;
              default: that.MousetoolElectronicFence.polygon(); break;
            }
            //事件注册
            that.MousetoolElectronicFence.on("draw", function (event) {
              that.$map.setDefaultCursor("");
              that.MousetoolElectronicFence.close(false);
              that.DrawCompletePolygon = event.obj;
            });
          });
        }
        else {
          this.MousetoolElectronicFence.close(true);
          switch (typeValue) {
            case "polygon": this.MousetoolElectronicFence.polygon(); break;
            case "circle": this.MousetoolElectronicFence.circle(); break;
            default: this.MousetoolElectronicFence.polygon(); break;
          }
        }
      },
      //改变电子围栏规则
      ruleChange(val){
        this.formData.rule = [val[val.length-1]];
      },
      //增加电子围栏 显示电子围栏表单 eftype为true显示电子围栏列表 反之
      addEnclosure() {
        this.eftype = this.eftype ? false:true;
        if(this.eftype){
          this.typevalue = 'polygon';
          this.clearAreaSelect();
          this.clearElectroninFence();
        }
      },
      //删除电子围栏
      delEnclosure(index){
        this.arrEnclosure.splice(index,1)
      },
      //清空电子围栏绘画工具
      clearElectroninFence(){
        if(this.districtExplorer){
          this.districtExplorer.clearFeaturePolygons();
        }
        if(this.MousetoolElectronicFence) {
          this.$map.setDefaultCursor("");
          this.MousetoolElectronicFence.close(true);
        }
      }
    },
    //电子围栏组件销毁后 清空操作 动作
    destroyed(){
      this.clearElectroninFence();
    }
  }

</script>
