/*
* @description: mqtt和veh(车辆相关操作) 方法实例封装
* @author: wp
* @update: 2018-05-9
*********************************/
import context from 'static/script/context';                     //右键菜单 js 基类
import Messaging from 'static/script/mqttws31';                  //引入mqtt基类
import utils from '@/utils/tool';                                //引入工具

var clientuuid = "start_" + uuid(15, 30);                        //客户端标识
var mqttClient = null;                                           //声明mqtt全局对象

export default {
  install(Vue, { store }) {
    Vue.prototype.$context = context;      //右键菜单插件
    //mqtt全局封装对象
    let mapObj = new AMap.Map('mapContainer');    //获取地图对象
    Vue.prototype.$mqtt = {
      config:{
        host:"mqtt.wwvas.com", //服务器主机名
        port:61623,            //服务器端口号
        loginUserId:10668      //当前用户id
      },
      moveing:true,
      //mqtt连接
      mqttConnect(){
        let _this = this;
        //如果 mqtt客户端未创建 就重新 新建一个
        if (mqttClient == null) {
            clientuuid = _this.config.loginUserId + "_" + uuid(15, 30);
            _this.createMQTTClient();
        }
        if (mqttClient.connectState) return;
        //直接连接服务器
        mqttClient.connect({
            userName: "admin",
            password: "password",
            onSuccess (frame) {
              console.log('mqtt连接成功!');
              //设置用户通信状态 为通信中
              store.commit('update_userSignal_state',0);
              //订阅分组统计信息
              mqttClient.subscribe("user/statistics/" + _this.config.loginUserId);
              //通知服务器登录信息
              var topicName = "user/statistics/" + _this.config.loginUserId;
              sendMessageToMqttServer("login", topicName);

            },
            onFailure (failure) {
                //设置用户通信状态 为离线 连接中
                store.commit('update_userSignal_state',1);
                console.log(failure.errorMessage);
                //10秒后重新连接
                console.log('重新连接......');
                //mqttClient = null;
                setTimeout( () => {
                    //链接
                    _this.mqttConnect;
                }, 30000);
            },
            cleanSession: true
        })
      },
      //创建mqtt客户端
      createMQTTClient() {
        let _this = this;
        if (mqttClient != null) return;
        clientuuid = _this.config.loginUserId + "_" + uuid(15, 30);
        mqttClient = new Messaging.Client(_this.config.host, _this.config.port, clientuuid);
        //事件
        mqttClient.onMessageArrived = function (message) {
          var entity = eval("(" + message.payloadString + ")");
          // console.log('mqtt数据',entity)
          //判断主题数据
          switch (entity.topicmodel) {
            //case 0: initCompanyGroup(entity.data); break;
            case 1: _this.initCompanyGroupStatistics(entity.data); break;
            //     case 2: initGroupDataToTree(entity); break;
            //     case 3: changeTreeCarState(entity.data); break;
            case 4: _this.excuteRealDataExcute(entity.data); break;
            case 5: _this.policeData(entity.data); break;
            //     case 6: changeTreeVehicleState(entity.data); break;
          }
        };
        mqttClient.onConnectionLost = function (responseObject) {
          if (responseObject.errorCode !== 0) {
            //设置用户通信状态 为离线 连接中
            store.commit('update_userSignal_state',1);
            console.log(mqttClient.clientId + '断开连接,错误码' + responseObject.errorCode);
            //10秒后重新连接
            console.log('重新连接......');
            //mqttClient = null;
            setTimeout(() => {
                //链接
                _this.mqttConnect();
            }, 30000);
          }
        }
      },
      //更新树状态统计信息
      initCompanyGroupStatistics(data) {
        store.commit('update_GroupStatistics',data);
      },
      //订阅单个车辆
      subscribeOneCar(vehicleid){
        if (mqttClient == null) return;
        var topicName = "vehicle/" + vehicleid;
        mqttClient.subscribe(topicName);
        //通知服务器
        sendMessageToMqttServer("vehiclerealtimedata", topicName);
      },
      //取消订阅车辆
      unsubscribeOneCar(vehicleid){
        if (mqttClient == null) return;
        var topicName = "vehicle/" + vehicleid;
        mqttClient.unsubscribe(topicName);
        sendMessageToMqttServer("cancelsubscribe", topicName);//通知服务器已取消订阅
      },
      //订阅报警信息列表
      subscribePoliceInfo(userId){
        if (mqttClient == null) return;
        let topicName = "alarm/" + userId;
        mqttClient.subscribe(topicName);
        //通知服务器
        sendMessageToMqttServer("socketPoliceInfo", topicName);
      },
      //报警数据获取
      policeData(socketData){
          console.log('推过来的报警信息',socketData);
          let objBox = {};
          let obj = {};                                                         //报警列表数据装接
          if (socketData) {                                                         //如果获取webSocket推送的数据
            let lng = socketData.realdata.lng,lat = socketData.realdata.lat;              //获取经纬度
            let point;
            if (lng < 1 || lat < 1) {
              point = "";
            }else {
              let gcj_02_point = utils.transformWGStoGCJ(lng, lat);
              point = [gcj_02_point[0],gcj_02_point[1]];
            }
            //报警类型获取
            let alarmparamcode= socketData.alarminfo.alarmparamcode;                 //报警类型对应码
            let getPolicetype = JSON.parse(sessionStorage.getItem('policeTypeCode'));     //获取报警类型对应码和类型
            let policeType='';                                                //报警类型
            for (let item of getPolicetype){
                  if (alarmparamcode == item.ParamCode){
                      policeType = item.ParamName;                            //推送过来的数据，报警类型或者异常类型过滤获取
                  }
            }
            /*高德地图解析经纬度 为地址*/


            let MGeocoder;
            function geocoder2(lng,lat) {                                     //POI搜索，关键字查询
              let lnglatXY = new AMap.LngLat(lng,lat);
              //加载地理编码插件
              mapObj.plugin(["AMap.Geocoder"], function() {
                MGeocoder = new AMap.Geocoder({
                  radius: 1000,
                  extensions: "all"
                });
                //返回地理编码结果
                AMap.event.addListener(MGeocoder, "complete", geocoder_CallBack2);
                //逆地理编码
                MGeocoder.getAddress(lnglatXY);
              });
            }
            function geocoder_CallBack2(data) {                             //回调函数
              obj.adress = data.regeocode.formattedAddress;                 //详细地址
            }
            geocoder2(point[0],point[1]);
            obj.point = point;
            obj.vehicleid = socketData.alarminfo.vehicleid;                 //报警车辆标识
            obj.carNo = socketData.basicdata.carno;                         //获取车牌号
            obj.policeType = policeType;                                    //报警类型
            obj.policeInfo = socketData.alarminfo.alarmcontent;             //报警信息
            obj.policeSecond = 1;                                           //报警次数
            obj.GPSTime = socketData.realdata.gpstime;                      //GPS时间
            obj.serverTime = socketData.realdata.recvtime;                  //服务器时间
            obj.speed = '';                                                 //速度
            obj.equipmentNo = socketData.realdata.prodnum;                  //设备号码
            obj.frameNumber = socketData.basicdata.vin;                     //车架号
            objBox.obj = obj;
            objBox.stateType = alarmparamcode;                              //状态类型如果是5和6就是报警类型，其余为异常类型
            store.commit('policeData',objBox)                               //过滤一条报警信息或者异常数据，传送给状态树
          }
      },
      //接受实时数据(更新或者加载数据)
      async excuteRealDataExcute(data) {
        let mqttRealDataQueue = Vue.prototype.$Veh.mqttRealDataQueue;
        if(data.basicdata == null) return;
        if(data.basicdata.vehicleid == null) return;
        //判断 当前推送 的车辆位置信息 是否是最新数据
        let cd = store.getters.monitorData.filter(function(item){
          if(item.vehicleid === data.realdata.vehicleid)
            return item;
        });
        if(cd.length == 0) return;
        let ngpstime = utils.formatDate.getDateStringTime(cd[0].gpsTime);
        let mgpstime = utils.formatDate.getDateStringTime(data.realdata.gpstime);
        if(mgpstime < ngpstime) return;
        //end
        //图形
        var realdata = data.realdata;
        if (realdata != null && realdata.lng > 0) {
            //纠偏
            var gcj_02_point = utils.transformWGStoGCJ(realdata.lng, realdata.lat);
            realdata.lng = gcj_02_point[0];
            realdata.lat = gcj_02_point[1];
            //更新数据
            data.realdata = realdata;
            mqttRealDataQueue.push(data);
            Vue.prototype.$Veh.updateVehicledetail(data);
            if(this.moveing){
              let vehdata = mqttRealDataQueue.shift();
              this.moveing = false;//
              this.moveing = await utils.moveVehicle({state:store.state,realdata:realdata,vehdata:vehdata})

            }
            //图形
            // store.commit("createCarMarkerToMap",{map:Vue.prototype.$map,vehicleid:realdata.vehicleid,data});
        } else {
          console.log(data)
        }
      }
    }

    //车辆全局对象
    Vue.prototype.$Veh = {
      mqttRealDataQueue:[],
      //更新监控车辆详情数据
      updateVehicledetail(data) {
        let basicdata = data.basicdata,
        proddata = data.proddata,
        realdata = data.realdata,
        row = {};
        /****************************基础属性信息****************************/
        // row.cph = name;
        // row.carNo = basicdata.carno + "/" + basicdata.ownername;
        row.devices = proddata;
        row.cjh = basicdata.vin;
        row.cpys = "";
        row.czxm = basicdata.ownername;
        row.czxb = basicdata.ownersex;
        row.sfzhm = basicdata.idcard;
        row.sjhm = basicdata.ownermobile;
        row.cjsj = utils.transformTime(basicdata.appointdate);
        row.cllx = basicdata.vehicletype;
        row.clxh = basicdata.model;
        row.csys = basicdata.color;
        row.corpname = basicdata.corpname;
        row.vehicleid = basicdata.vehicleid;
        if (basicdata.serviceexpdate) row.fwdqsj = utils.transformTime(basicdata.serviceexpdate).split(" ")[0];
        /****************************实时数据信息****************************/
        if(realdata){
          var g = row.gpsTime;
          row.carState = utils.getCarStateText(realdata.istate);
          row.lng = realdata.lng;
          row.sbid = realdata.prodnum;
          row.gpsTime = utils.transformTime(realdata.gpstime);
          row.serverTime = utils.transformTime(realdata.recvtime);
          row.fx = utils.fomateFX(realdata.direct);
          row.power = utils.powerTransform(realdata.power);
          row.speed = realdata.veo;
          row.local = utils.isTrueLocal(realdata.lng, realdata.lat);
          row.localType = realdata.locationmodel;
          //异步地址转换 更新
          if(realdata){
            var point;
            if (realdata.lng < 1 || realdata.lat < 1) {
              point = "";
            }else {
              var gcj_02_point = utils.transformWGStoGCJ(realdata.lng, realdata.lat);
              point = [gcj_02_point[0],gcj_02_point[1]];
            }

            store.commit("getPointAddressMut",{map:Vue.prototype.$map,vehicleid:basicdata.vehicleid,point});
          }
          //根据车辆id和设备信息获取设备 实时信息
          //获取设备信息
          for (var i = 0,len = proddata.length; i < len; i++) {
            if (row.prodnum == realdata.prodnum) {
              row.sbid = proddata[i].prodnum;
              row.sim = proddata[i].simcard;
              row.sbazsj = utils.transformTime(proddata[i].installtime);
            }
            break;
          }
        }
        
        store.commit("update_tableVehicledetail",row);
      },
    },

    //前端数据库初始化
    Vue.prototype.$indexedDB = {
      indexedDB:window.indexedDB || window.webkitindexedDB,
      db:null,             //如果数据库初始化成功 全局db实例
      //初始化数据库
      initIndexedDB(userID,cdata,cb){
        var _self = this;
        if (!window.indexedDB) {
          alert("前端数据库初始化失败！请更换浏览器，建议最新谷歌浏览器...")
          return;
        }
        // 更新版本，打开版本为2的数据库
        var request = _self.indexedDB.open('vpsdb'+userID,1);
        // 错误信息，打印日志
        request.onerror = function (e) {
          console.log(e);
        };
        // 数据库打开成功
        request.onsuccess = function(e){
          _self.db = e.target.result;
          if(cb != null) cb(0);
        }
        // 数据库最新版本进入
        request.onupgradeneeded = function(e){
          var db = _self.db = e.target.result;
          //创建车辆总数
          if(!db.objectStoreNames.contains('vehicleTotal')){
            db.createObjectStore('vehicleTotal', {keyPath: 'vesion'});
          }
          //创建标签表
          if(!db.objectStoreNames.contains('tag')){
            var tag = db.createObjectStore('tag', {keyPath: 'id'});
            tag.createIndex('corpid','corpid',{unique: false})
            tag.createIndex('tagid','tagid',{unique: false})
          }
          //创建车辆详情表
          if(!db.objectStoreNames.contains('vehicleDetail')){
            var vehicleDetail = db.createObjectStore('vehicleDetail', {keyPath: 'vehicleid'});
          }
          //创建历史轨迹详情表
          if(!db.objectStoreNames.contains('vehHistory')){
            var vehHistory = db.createObjectStore('vehHistory', {keyPath: 'id'});
            vehHistory.createIndex('vehicleidIndex','vehicleid',{unique: false})
          }
          //创建公司分组表
          if(!db.objectStoreNames.contains('company')){
            var company = db.createObjectStore('company', {keyPath: 'corpid'});
            company.createIndex('corpname','corpname',{unique: false})
          }
          //根据公司建车辆表
          cdata.forEach((item,index)=>{
            if(!db.objectStoreNames.contains('cveh'+item.corpid)){
              var vehicle = db.createObjectStore('cveh'+item.corpid, {keyPath: 'vehicleid'});
              vehicle.createIndex('name','name',{unique: false})
              vehicle.createIndex('ownername','ownername',{unique: false})
              vehicle.createIndex('corpid','corpid',{unique: false})
            }
          });

        }
      },
      //添加数据 覆盖相同id的数据
      putData(tableName, data, cb) {
        if(!this.db.objectStoreNames.contains(tableName)) {
          cb({
            error:1,
            data:'没有表存在'
          });
          return;
        };
        var transaction = this.db.transaction(tableName, 'readwrite');
        transaction.oncomplete = function () {
        };
        transaction.onerror = function (event) {
            console.dir(event)
        };
        var objectStore = transaction.objectStore(tableName);
        var request = objectStore.put(data);
        request.onsuccess = function (e) {
          if (cb) {
              cb({
                  error: 0,
                  data : data
              })
          }
        };
        request.onerror = function (e) {
            if (cb) {
                cb({
                    error: 1
                })
            }
        }
      },
      //添加数据
      addData(tableName, data, cb) {
        var transaction = this.db.transaction(tableName, 'readwrite');
        transaction.oncomplete = function () {
        };
        transaction.onerror = function (event) {
            console.dir(event)
        };
        var objectStore = transaction.objectStore(tableName);
        var request = objectStore.put(data);
        request.onsuccess = function (e) {
            if (cb) {
                cb({
                    error: 0,
                    data : data
                })
            }
        };
        request.onerror = function (e) {
            if (cb) {
                cb({
                    error: 1
                })
            }
        }
      },
      //游标删除 对应数据
      cursorDeldteData(tableName,keyname,keywords){
        //通过游标删除记录
        var transaction = this.db.transaction(tableName, 'readwrite');
        var objectStore = transaction.objectStore(tableName);
        var boundKeyRange = IDBKeyRange.only(keywords);
        var request = objectStore.index(keyname).openCursor(boundKeyRange);
        request.onsuccess = function(e){
            var cursor = e.target.result,
                value,
                deleteRequest;
            if(cursor){
              if(cursor.key == keywords){
                  deleteRequest = cursor.delete();//请求删除当前项
                  deleteRequest.onerror = function(){
                    cursor.continue();
                  };
                  deleteRequest.onsuccess = function(){
                    cursor.continue();
                  };
              }else{
                  cursor.continue();
              }
            }
          }
      },
      //删除数据根据id
      deleteData(tableName, id, cb) {
          var transaction = this.db.transaction(tableName, 'readwrite');
          transaction.oncomplete = function () {
          };
          transaction.onerror = function (event) {
              console.dir(event)
          };
          var objectStore = transaction.objectStore(tableName);
          var request = objectStore.delete(parseInt(id));
          request.onsuccess = function (e) {
              if (cb) {
                  cb({
                      error: 0,
                      data : parseInt(id)
                  })
              }
          };
          request.onerror = function (e) {
              if (cb) {
                  cb({
                      error: 1
                  })
              }
          }
      },
      //获取全部数据
      getDataAll(tableName, cb) {
          var transaction = this.db.transaction(tableName, 'readonly');
          transaction.oncomplete = function () {
          };
          transaction.onerror = function (event) {
              console.dir(event)
          };

          var objectStore = transaction.objectStore(tableName);
          var rowData = [];
          objectStore.openCursor(IDBKeyRange.lowerBound(0)).onsuccess = function (event) {
              var cursor = event.target.result;
              if (!cursor && cb) {
                  cb({
                      error: 0,
                      data : rowData
                  });
                  return;
              }
              rowData.push(cursor.value);
              cursor.continue();
          };
      },
      //根据公司获取 所有车
      getCorpDataAll(tableName,tagid,cb) {
          var transaction = this.db.transaction(tableName, 'readonly');
          transaction.oncomplete = function () {
          };
          transaction.onerror = function (event) {
            console.dir(event)
          };
          var objectStore = transaction.objectStore(tableName);
          var rowData = [];
          objectStore.openCursor(IDBKeyRange.lowerBound(0)).onsuccess = function (event) {
            var cursor = event.target.result;
            if ((!cursor && cb) || rowData.length == 100) {
                cb({
                    error: 0,
                    data : rowData
                });
                return;
            }

            if(tagid == -1){
              rowData.push(cursor.value);
            } else {
              if(cursor.value.tagid == tagid){
                rowData.push(cursor.value);
              }
            }
            cursor.continue();
          };
      },
      //根据id获取数据
      getDataById(tableName,id, cb){
        var transaction = this.db.transaction(tableName, 'readwrite');
        transaction.oncomplete = function () {
        };
        transaction.onerror = function (event) {
            console.dir(event)
        };
        var objectStore = transaction.objectStore(tableName);
        var request = objectStore.get(id);
        request.onsuccess = function (e) {
            if (cb) {
                cb({
                    error: 0,
                    data : e.target.result
                })
            }
        };
        request.onerror = function (e) {
            if (cb) {
                cb({
                    error: 1
                })
            }
        }
      },
      //根据公司 tagid查询 对应tag标签组
      getDataBySearchTagID(tableName, tagid,keyname,keywords, cb) {
          var transaction = this.db.transaction(tableName, 'readwrite');
          transaction.oncomplete = function () {
          };
          transaction.onerror = function (event) {
              console.dir(event)
          };
          var objectStore = transaction.objectStore(tableName);
          var rowData = [];
          objectStore.index(keyname).openCursor().onsuccess = function (event) {
              var cursor = event.target.result;
              if (!cursor) {
                  if (cb) {
                      cb({
                          error: 0,
                          data : rowData
                      })
                  }
                  return;
              }
              if(tagid == -1 && cursor.value[keyname] == keywords){
                rowData.push(cursor.value);
              } else {
                if(cursor.value.parenttagid == tagid && cursor.value[keyname] == keywords){
                  rowData.push(cursor.value);
                }
              }
              cursor.continue();
          };
      },
      //模糊查询车辆
      getDataBySearchLike(tableName, keyname,keywords, cb) {
          var transaction = this.db.transaction(tableName, 'readwrite');
          transaction.oncomplete = function () {
          };
          transaction.onerror = function (event) {
              console.dir(event)
          };

          var objectStore = transaction.objectStore(tableName);
          var rowData = [];
          objectStore.index(keyname).openCursor().onsuccess = function (event) {
              var cursor = event.target.result;
              if (!cursor || rowData.length >= 20) {
                  if (cb) {
                      cb({
                          error: 0,
                          data : rowData
                      })
                  }
                  return;
              }
              if(cursor.value[keyname].indexOf(keywords) != -1)
              rowData.push(cursor.value);
              cursor.continue();
          };
      },
      //根据关键词索引获取数据
      getDataBySearch(tableName, keyname,keywords, cb) {
          var transaction = this.db.transaction(tableName, 'readwrite');
          transaction.oncomplete = function () {
          };
          transaction.onerror = function (event) {
              console.dir(event)
          };

          var objectStore = transaction.objectStore(tableName);
          var boundKeyRange = IDBKeyRange.only(keywords);
          var rowData = [];
          objectStore.index(keyname).openCursor(boundKeyRange).onsuccess = function (event) {
              var cursor = event.target.result;
              if (!cursor) {
                  if (cb) {
                      cb({
                          error: 0,
                          data : rowData
                      })
                  }
                  return;
              }
              rowData.push(cursor.value);
              cursor.continue();
          };
      },
      //更新数据
      updateData(tableName, id, udata, cb) {
          var transaction = this.db.transaction(tableName, 'readwrite');
          transaction.oncomplete = function () {
          };
          transaction.onerror = function (event) {
              console.dir(event)
          };
          var objectStore = transaction.objectStore(tableName);
          var request = objectStore.get(id);
          request.onsuccess = function (e) {
              var thisDB = e.target.result;
              if(thisDB == undefined) return;
              for (var key in udata) {
                thisDB[key] = udata[key];
              }
              objectStore.put(thisDB);
              if (cb) {
                  cb({
                      error: 0,
                      data : thisDB
                  })
              }
          };
          request.onerror = function (e) {
              if (cb) {
                  cb({
                      error: 1
                  })
              }
          }
      },
      //根据页码获取数据
      getDataByPager(tableName, start, end, cb) {
          var transaction = this.db.transaction(tableName, 'readwrite');
          transaction.oncomplete = function () {
          };
          transaction.onerror = function (event) {
              console.dir(event)
          };
          var objectStore = transaction.objectStore(tableName);
          var boundKeyRange = IDBKeyRange.bound(start, end, false, true);
          var rowData = [];
          objectStore.openCursor(boundKeyRange).onsuccess = function (event) {
              var cursor = event.target.result;
              if (!cursor && cb) {
                  cb({
                      error: 0,
                      data : rowData
                  });
                  return;
              }
              rowData.push(cursor.value);
              cursor.continue();
          };
      },
      /**
        * 清除整个对象存储(表)
      */
      clear(tableName){
        var request = this.db.transaction(tableName,"readwrite").objectStore(tableName).clear();
        request.onsuccess = function(){
          console.log('清除成功');
        }
      }
    }
  }
}

//创建标识符`
function uuid(len, radix) {
  var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
  var uuid = [], i;
  radix = radix || chars.length;

  if (len) {
      for (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random() * radix];
  } else {
      var r;
      uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
      uuid[14] = '4';
      for (i = 0; i < 36; i++) {
          if (!uuid[i]) {
              r = 0 | Math.random() * 16;
              uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];
          }
      }
  }
  return uuid.join('');
}
//给服务器发送消息
function sendMessageToMqttServer(destinationName, topicName) {
  var objStr = JSON.stringify({
      clientid: clientuuid,
      topicname: topicName
  });
  var msg = new Messaging.Message(objStr);
  msg.destinationName = destinationName;
  mqttClient.send(msg);
  // console.log(destinationName + "-" + objStr);
}
